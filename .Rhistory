# Theme for ggplot
theme_set(
theme_light() + theme(legend.position = "top")
)
loadPkg <- function(pkgname){
# Test to see if package pkgname is installed.
# character.only=TRUE means pkgname is a character string with the name
# of the package we want to use.
if(require(pkgname, character.only = TRUE)) {
# paste0() concatenates strings without any separator
print(paste0("'", pkgname,"' is loaded correctly"))
} else {
# The require() function returned FALSE so we will try to install the
# package from the CRAN site
print(paste0("Trying to install '", pkgname, "'"))
install.packages(pkgname, character.only = TRUE,
repos="http://cran.us.r-project.org")
if(require(pkgname, character.only = TRUE)) {
print(paste0("'", pkgname, "' is installed and loaded."))
} else {
print(paste0("Could not install '", pkgname, "'"))
}
}
}
# If we provide a vector of package names, we can load them all as follows:
loadPkgs <- function(pkgnames){
for (pkgname in pkgnames) loadPkg(pkgname)
}
pkgs <- c('tidyverse',
'dplyr',
'colorspace',
'ggfortify',
'GGally',
'psych',
'ggbiplot',
'AMR',
'caret',
'ROCR',
'pROC',
'mlogit',
'leaps',
'glmnet')
loadPkgs(pkgs)
# Theme for ggplot
theme_set(
theme_light() + theme(legend.position = "top")
)
ig <- read_tsv("../dataset/tsv/event_ig_p5y.tsv")
ig <- read_tsv("../dataset/tsv/event_ig_p5y.tsv")
tw <- read_tsv("../dataset/tsv/event_tw_p1y.tsv")
ig_top <- read_tsv("../dataset/tsv/ig_top_followed.tsv")
tw_top <- read_tsv("../dataset/tsv/tw_top_followed.tsv")
summary(ig)
head(ig)
plot(ig$user_name)
ggplot(ig) + geom_histogram(aes(user_name))
ggplot(ig) + geom_bar(aes(user_name))
ig %>% count(user_name)
View(ig)
ig %>% count(user_id)
ig %>% count(user_id) %>% arrange(desc(n))
top_posting_users
top_posting_users <- ig %>% count(user_id) %>% arrange(desc(n))
top_posting_users
top_posting_users$user_id[1]
top_ig_user <- top_posting_users$user_id[1]
ig %>% filter(user_id == top_ig_user)
top_ig_user_posts <- ig %>% filter(user_id == top_ig_user)
View(top_ig_user_posts)
head(top_ig_user_posts$post_caption)
ggplot(top_posting_users, aes(n)) + geom_histogram()
ggplot(top_posting_users %>% filter(n <= 5000), aes(n)) + geom_histogram()
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram()
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram(bins = 20)
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram(bins = 50)
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram(bins = 40)
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram(bins = 20)
median(top_posting_users$n)
top_posting_users <- ig %>% count(user_id) %>% arrange(desc(n))
top_posting_users
median(top_posting_users$n)
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram(bins = 20, color = "black") +
labs(
title = "Count of IG Posts Per User P5Y",
subtitle = "Users with over 1000 posts omitted",
x = "Number of Users",
y = "Number of Posts"
)
ggplot(top_posting_users %>% filter(n <= 1000), aes(n)) + geom_histogram(bins = 20, fill = "black") +
labs(
title = "Count of IG Posts Per User P5Y",
subtitle = "Users with over 1000 posts omitted",
x = "Number of Users",
y = "Number of Posts"
)
for (i in 1:25) {
top_ig_user <- top_posting_users$user_id[i]
top_ig_user_posts <- ig %>% filter(user_id == top_ig_user)
head(top_ig_user_posts$post_caption)
}
for (i in 1:25) {
top_ig_user <- top_posting_users$user_id[i]
top_ig_user_posts <- ig %>% filter(user_id == top_ig_user)
print(head(top_ig_user_posts$post_caption))
}
ggplot(ig, aes(post_likes)) + geom_histogram()
ggplot(ig, aes(post_likes)) + geom_histogram(bins = 200)
ggplot(ig %>% filter(likes <= 1000), aes(post_likes)) + geom_histogram(bins = 30)
ggplot(ig %>% filter(post_likes <= 1000), aes(post_likes)) + geom_histogram(bins = 30)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 30)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 40)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 50)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 60)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 70)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 80)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 00)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 100)
ggplot(ig %>% filter(post_likes <= 300), aes(post_likes)) + geom_histogram(bins = 100)
5
5
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 100)
ggplot(ig %>% filter(post_likes <= 500), aes(post_likes)) + geom_histogram(bins = 100, fill = "black") +
labs(
title = "Histogram of IG Post Likes P5Y",
subtitle = "Posts with over 500 likes omitted",
x = "Number of Likes",
y = "Number of Posts"
)
ggplot(ig, aes(segment_name)) + geom_bar()
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar()
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90))
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar(fill = 'black') +
theme(axis.text.x = element_text(angle = 90))
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar(fill = 'black') +
theme(axis.text.x = element_text(angle = 45))
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar(fill = 'black') +
theme(axis.text.x = element_text(angle = 90))
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar(fill = 'black') +
theme(axis.text.x = element_text(angle = 90))
ggplot(ig %>% filter(!is.na(segment_name)), aes(segment_name)) + geom_bar(fill = 'black') +
theme(axis.text.x = element_text(angle = 90))
